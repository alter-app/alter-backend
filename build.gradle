plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.4'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.dreamteam'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
	implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.17.0'
	implementation 'commons-io:commons-io:2.18.0'
	implementation 'org.json:json:20250107'
	implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6'
	implementation 'com.vladmihalcea:hibernate-types-60:2.21.1'
	implementation 'net.javacrumbs.shedlock:shedlock-spring:6.8.0'
	implementation 'net.javacrumbs.shedlock:shedlock-provider-redis-spring:6.8.0'
    implementation 'com.google.firebase:firebase-admin:9.5.0'
    implementation('org.springframework.ai:spring-ai-starter-model-openai') {
        exclude group: 'io.swagger.core.v3', module: 'swagger-annotations'
    }

	compileOnly 'org.projectlombok:lombok'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	runtimeOnly 'org.postgresql:postgresql'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'

	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor 'com.querydsl:querydsl-apt:5.1.0:jakarta'
	annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.ai:spring-ai-bom:1.0.0"
    }
}

def querydslGenerated = 'src/main/generated'

sourceSets {
	main.java.srcDir(querydslGenerated)
}

tasks.withType(JavaCompile).configureEach {
	options.getGeneratedSourceOutputDirectory().set(file(querydslGenerated))
}

tasks.named('test') {
	useJUnitPlatform()
}

clean {
	delete file(querydslGenerated)
}
